{"name":"Appkit","body":"swt-appkit - easing development of swt-applications\r\n==========================================\r\n\r\n* API-Documentation: [JavaDoc](http://fab1an.github.com/appkit/javadoc/)\r\n* Email: fabian.zeindl@gmail.com\r\n* Latest build: [swt-appkit.jar](http://fab1an.github.com/appkit/swt-appkit.jar)\r\n* Discussion: [appkit@googlegroups.com] (http://groups.google.com/group/appkit)\r\n* SampleCode: [Sample.java](http://github.com/fab1an/appkit/blob/master/src/org/appkit/sample/Sample.java)\r\n* License: Code is released under the LGPL2.\r\n\r\nIdea\r\n-------\r\n\r\nSWT-Appkit is a collection of utilities aiming to improve and help coding with SWT and\r\nbuilding better, more comprehensive, modern applications.\r\nIt's a kit, not a framework, in the sense that it tries not to force you to change your\r\napplication-structure. Instead you can gradually adapt your code to use parts and features,\r\nwhich you might find useful.\r\n\r\nThe API was designed with the following principles:\r\n* Almost all SWT-related calls have to be done in the Display-Thread, which enables you to use static methods more freely. \r\n* Heavy use of the Google Guava-toolkit, which enables you to write more modern and fun Java-code.\r\n* Fail-fast and safe-guarding of IllegalArguments etc. by using Guava's Preconditions.\r\n* Convention over Configuration\r\n\r\nDependencies\r\n------------------------\r\n\r\n* [gson-2.0](http://google-gson.googlecode.com) fast json parsing library\r\n* [guava-11.0.2] (http://guava-libraries.googlecode.com/) google's core java-libraries\r\n* [jna-3.4] (http://github.com/twall/jna) java native access, only necessary to get correct ApplicationData Folder on Windows (O_o)\r\n* [slf4j-api-1.6.4](http://slf4j.org/) simple logging facade for java, provides pluggable logging (static binding, no need for configuration)\r\n* [swt-3.7.1](http://www.eclipse.org/swt) SWT\r\n\r\nThank you / Donations\r\n------------------------------------\r\n\r\nIf you want you can [flattr](http://flattr.com/profile/cel1ne) me, or send a Paypal donation to the email above.\r\n\r\nFeatures\r\n-------------------------------\r\n\r\n### Templating ###\r\n\r\nUse a Json-File: [orderview.json](http://fab1an.github.com/appkit/orderview.json) to create Interfaces:    \r\n<img src=\"http://fab1an.github.com/appkit/orderview-json.png\" height=\"150px\"/>\r\n<img src=\"http://fab1an.github.com/appkit/Orderview-Sample.png\" height=\"150px\"/>    \r\n\r\n```java\r\nShell = new Shell();\r\nshell.setLayout(new FillLayout());\r\n\r\n/* create templating */\r\nTemplating templating = Templating.fromResources();\r\n\r\n/* create the orderView component */\r\nComponent orderView = templating.create(\"orderview\", shell);\r\n\r\n/* select widgets and work with them */\r\nTable t = orderView.select(\"orders\", Table.class);\r\nLabel l = orderView.select(\"sidebar.stores\", Label.class);\r\n```\r\n\r\n### Translate your Application ###\r\n```java\r\n/* manual translations */\r\nTexts texts = Texts.fromResources();\r\nlabel.setText(texts.get(\"label_size\", opt1, opt2));\r\n\r\n/* translate components automatically */\r\nTexts.translateComponent(orderView);\r\n```\r\n\r\n### EventHandling\r\nWrite less cluttered event-handling code using Guava's EventBus.\r\n\r\n```java\r\npublic Sample() {\r\n\t// ...\r\n\r\n\t/* for catching all local events (see the methods tagged with @Subscribe) */\r\n\tLocalEventContext eventContext = new LocalEventContext(this);\r\n\r\n\t/* create the orderview component with the given eventContext */\r\n\tComponent orderView = templating.create(\"orderview\", eventContext, shell);\r\n\r\n\t// ...\r\n\tshell.open();\r\n}\r\n\r\n@Subscribe\r\npublic void daterangeChange(final DateRange daterange) {\r\n\tL.debug(\"we got a date-range of our date picker: {}\", daterange);\r\n}\r\n```\r\n### Registries for Colors, Fonts and Images ###\r\nAutomatic assigning, caching, disposing etc.\r\n\r\n```java\r\nButton btn = new Button(parent, SWT.PUSH);\r\nFonts.set(btn, Fonts.BOLD);\r\nColors.setForeground(btn, 140, 120, 100); // RGB\r\nImages.set(btn, ImageTypes.LOGO); // ImageTypes is an enum providing filenames\r\n```\r\n\r\n### Preference storing and loading ###\r\n\r\n```java\r\nPrefStore prefStore = PrefStore.createJavaPrefStore(\"org/appkit/sample\");\r\nint option = prefStore.get(\"option_name\", 2); // 2 is the default\r\nboolean debugEnabled = prefStore.get(\"debug\", false); // false is the default\r\n```\r\n\r\n\r\n### Overlays ###\r\n\r\nTODO\r\n\r\n### Measurements\r\nDo measurements of your code run-time.\r\n```java\r\nMeasurement.Listener statistic = new SimpleStatistic();\r\nMeasurement.setListener(statistic);\r\nMeasurement.start(DEBUG_ENABLED, \"expensive_op\", data); // data is optional\r\n\r\n/* munching, crunching numbers */\r\n\r\nMeasurement.stop();\r\nL.debug(\"Stats: {}\", statistic.getResults());\r\n```\r\n\r\n### Must-have Utilities for SWT-Widgets ###\r\n```java\r\n/* size table-coumns equally among available size */\r\nTableUtils.fillTableWidth(table);\r\n\r\n/* restore and save column-weights and order */\r\nTableUtils.rememberColumnWeights(prefStore, executor, table, \"MyTable\");\r\nTableUtils.rememberColumnOrder(prefStore, executor, table, \"MyTable\");\r\n\r\n/* resize columns proportionally if table was resized */\r\nTableUtils.autosizeColumns(table);\r\n\r\n/* save and restore shell size, position and maximised state */\r\nShellUtils.rememberSizeAndPosition(prefStore, executor, shell, \"My Shell\", defWidth, defHeight, defX, defY);\r\n\r\n/* add a DropDown Menu to a Button */\r\nButtonUtils.setDropDownMenu(btn, menu);\r\n```\r\n\r\n### … better MessageBox, ScrollListener for Tables, Throttling of often-running Runnables…\r\n","tagline":"swt-appkit - easing development of swt-applications","google":"UA-31336098-1","note":"Don't delete this file! It's used internally to help with page regeneration."}